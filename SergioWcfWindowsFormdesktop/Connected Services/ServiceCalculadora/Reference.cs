//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SergioWcfWindowsFormdesktop.ServiceCalculadora {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceCalculadora.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/divicion", ReplyAction="http://tempuri.org/IService1/divicionResponse")]
        float divicion(float N1, float N2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/divicion", ReplyAction="http://tempuri.org/IService1/divicionResponse")]
        System.Threading.Tasks.Task<float> divicionAsync(float N1, float N2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/resta", ReplyAction="http://tempuri.org/IService1/restaResponse")]
        float resta(float N1, float N2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/resta", ReplyAction="http://tempuri.org/IService1/restaResponse")]
        System.Threading.Tasks.Task<float> restaAsync(float N1, float N2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/suma", ReplyAction="http://tempuri.org/IService1/sumaResponse")]
        float suma(float N1, float N2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/suma", ReplyAction="http://tempuri.org/IService1/sumaResponse")]
        System.Threading.Tasks.Task<float> sumaAsync(float N1, float N2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/multiplicacion", ReplyAction="http://tempuri.org/IService1/multiplicacionResponse")]
        float multiplicacion(float N1, float N2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/multiplicacion", ReplyAction="http://tempuri.org/IService1/multiplicacionResponse")]
        System.Threading.Tasks.Task<float> multiplicacionAsync(float N1, float N2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/operacion", ReplyAction="http://tempuri.org/IService1/operacionResponse")]
        float operacion(int identified, float N1, float N2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/operacion", ReplyAction="http://tempuri.org/IService1/operacionResponse")]
        System.Threading.Tasks.Task<float> operacionAsync(int identified, float N1, float N2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : SergioWcfWindowsFormdesktop.ServiceCalculadora.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<SergioWcfWindowsFormdesktop.ServiceCalculadora.IService1>, SergioWcfWindowsFormdesktop.ServiceCalculadora.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public float divicion(float N1, float N2) {
            return base.Channel.divicion(N1, N2);
        }
        
        public System.Threading.Tasks.Task<float> divicionAsync(float N1, float N2) {
            return base.Channel.divicionAsync(N1, N2);
        }
        
        public float resta(float N1, float N2) {
            return base.Channel.resta(N1, N2);
        }
        
        public System.Threading.Tasks.Task<float> restaAsync(float N1, float N2) {
            return base.Channel.restaAsync(N1, N2);
        }
        
        public float suma(float N1, float N2) {
            return base.Channel.suma(N1, N2);
        }
        
        public System.Threading.Tasks.Task<float> sumaAsync(float N1, float N2) {
            return base.Channel.sumaAsync(N1, N2);
        }
        
        public float multiplicacion(float N1, float N2) {
            return base.Channel.multiplicacion(N1, N2);
        }
        
        public System.Threading.Tasks.Task<float> multiplicacionAsync(float N1, float N2) {
            return base.Channel.multiplicacionAsync(N1, N2);
        }
        
        public float operacion(int identified, float N1, float N2) {
            return base.Channel.operacion(identified, N1, N2);
        }
        
        public System.Threading.Tasks.Task<float> operacionAsync(int identified, float N1, float N2) {
            return base.Channel.operacionAsync(identified, N1, N2);
        }
    }
}
